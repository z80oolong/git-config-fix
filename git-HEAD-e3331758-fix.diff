diff --git a/Makefile b/Makefile
index 0cb6590f2..172dbfc7c 100644
--- a/Makefile
+++ b/Makefile
@@ -2026,7 +2026,6 @@ version.sp version.s version.o: EXTRA_CPPFLAGS = \
 
 $(BUILT_INS): git$X
 	$(QUIET_BUILT_IN)$(RM) $@ && \
-	ln $< $@ 2>/dev/null || \
 	ln -s $< $@ 2>/dev/null || \
 	cp $< $@
 
@@ -2346,7 +2345,6 @@ git-remote-testsvn$X: remote-testsvn.o GIT-LDFLAGS $(GITLIBS) $(VCSSVN_LIB)
 
 $(REMOTE_CURL_ALIASES): $(REMOTE_CURL_PRIMARY)
 	$(QUIET_LNCP)$(RM) $@ && \
-	ln $< $@ 2>/dev/null || \
 	ln -s $< $@ 2>/dev/null || \
 	cp $< $@
 
@@ -2757,7 +2755,6 @@ endif
 		test -n "$(INSTALL_SYMLINKS)" && \
 		ln -s "$$destdir_from_execdir_SQ/$(bindir_relative_SQ)/$$p" "$$execdir/$$p" || \
 		{ test -z "$(NO_INSTALL_HARDLINKS)$(NO_CROSS_DIRECTORY_HARDLINKS)" && \
-		  ln "$$bindir/$$p" "$$execdir/$$p" 2>/dev/null || \
 		  cp "$$bindir/$$p" "$$execdir/$$p" || exit; } \
 	  done; \
 	} && \
@@ -2766,7 +2763,6 @@ endif
 		test -n "$(INSTALL_SYMLINKS)" && \
 		ln -s "git$X" "$$bindir/$$p" || \
 		{ test -z "$(NO_INSTALL_HARDLINKS)" && \
-		  ln "$$bindir/git$X" "$$bindir/$$p" 2>/dev/null || \
 		  ln -s "git$X" "$$bindir/$$p" 2>/dev/null || \
 		  cp "$$bindir/git$X" "$$bindir/$$p" || exit; } \
 	done && \
@@ -2775,7 +2771,6 @@ endif
 		test -n "$(INSTALL_SYMLINKS)" && \
 		ln -s "$$destdir_from_execdir_SQ/$(bindir_relative_SQ)/git$X" "$$execdir/$$p" || \
 		{ test -z "$(NO_INSTALL_HARDLINKS)" && \
-		  ln "$$execdir/git$X" "$$execdir/$$p" 2>/dev/null || \
 		  ln -s "git$X" "$$execdir/$$p" 2>/dev/null || \
 		  cp "$$execdir/git$X" "$$execdir/$$p" || exit; } \
 	done && \
@@ -2785,7 +2780,6 @@ endif
 		test -n "$(INSTALL_SYMLINKS)" && \
 		ln -s "git-remote-http$X" "$$execdir/$$p" || \
 		{ test -z "$(NO_INSTALL_HARDLINKS)" && \
-		  ln "$$execdir/git-remote-http$X" "$$execdir/$$p" 2>/dev/null || \
 		  ln -s "git-remote-http$X" "$$execdir/$$p" 2>/dev/null || \
 		  cp "$$execdir/git-remote-http$X" "$$execdir/$$p" || exit; } \
 	done && \
diff --git a/config.c b/config.c
index f4a208a16..37d44c98d 100644
--- a/config.c
+++ b/config.c
@@ -74,6 +74,53 @@ static int core_compression_seen;
 static int pack_compression_seen;
 static int zlib_compression_seen;
 
+#ifndef NO_USE_ERRLEVEL_CONFIG_LOCK_FAILURE
+/*
+ * If the git configuration file (.git/config) cannot be locked on a shared
+ * file system on Android, VFAT, NTFS, etc., then git causes operations such as
+ * clone to fail with an error message.
+ *
+ * modified by Z.OOL. (mailto:zool@zool.jpn.org)
+ * ref.) https://github.com/termux/termux-packages/issues/227
+ */
+
+#define QUIET_CONFIG_LOCK_FAILURE 0
+#define WARN_CONFIG_LOCK_FAILURE  1
+#define ERROR_CONFIG_LOCK_FAILURE 2
+
+static void warn_config_lock_failure(void) {
+	static int _warned = 0;
+
+	if (!_warned) {
+		warning("Cannot lock .git/config bon this file system - For example, this file system is VFAT or NTFS, etc.");
+		_warned = 1;
+	}
+}
+
+static int error_level_config_lock_failure(void) {
+	static int _level = -1; const char *level;
+
+	if (_level < 0) {
+		if(git_config_get_string_const("core.errorLevelConfigLockFailure", &level) != 0) {
+			_level = WARN_CONFIG_LOCK_FAILURE;
+			return _level;
+		}
+
+		if (!strcmp(level, "error")) {
+			_level = ERROR_CONFIG_LOCK_FAILURE;
+		} else if (!strcmp(level, "warn")) {
+			_level = WARN_CONFIG_LOCK_FAILURE;
+		} else if (!strcmp(level, "quiet")) {
+			_level = QUIET_CONFIG_LOCK_FAILURE;
+		} else {
+			_level = WARN_CONFIG_LOCK_FAILURE;
+		}
+	}
+
+	return _level;
+}
+#endif
+
 static int config_file_fgetc(struct config_source *conf)
 {
 	return getc_unlocked(conf->u.file);
@@ -2783,9 +2830,23 @@ int git_config_set_multivar_in_file_gently(const char *config_filename,
 		in_fd = -1;
 
 		if (chmod(get_lock_file_path(&lock), st.st_mode & 07777) < 0) {
+#ifndef NO_USE_ERRLEVEL_CONFIG_LOCK_FAILURE
+			switch(error_level_config_lock_failure()) {
+				case ERROR_CONFIG_LOCK_FAILURE:
+					error_errno("chmod on %s failed", get_lock_file_path(&lock));
+					ret = CONFIG_NO_WRITE;
+					goto out_free;
+				case WARN_CONFIG_LOCK_FAILURE:
+					warn_config_lock_failure();
+					break;
+				case QUIET_CONFIG_LOCK_FAILURE:
+					break;
+			}
+#else
 			error_errno("chmod on %s failed", get_lock_file_path(&lock));
 			ret = CONFIG_NO_WRITE;
 			goto out_free;
+#endif
 		}
 
 		if (store.seen_nr == 0) {
@@ -3021,9 +3082,22 @@ static int git_config_copy_or_rename_section_in_file(const char *config_filename
 	}
 
 	if (chmod(get_lock_file_path(&lock), st.st_mode & 07777) < 0) {
+#ifndef NO_USE_ERRLEVEL_CONFIG_LOCK_FAILURE
+		switch(error_level_config_lock_failure()) {
+			case ERROR_CONFIG_LOCK_FAILURE:
+				ret = error_errno("chmod on %s failed", get_lock_file_path(&lock));
+				goto out;
+			case WARN_CONFIG_LOCK_FAILURE:
+				warn_config_lock_failure();
+				break;
+			case QUIET_CONFIG_LOCK_FAILURE:
+				break;
+		}
+#else
 		ret = error_errno("chmod on %s failed",
 				  get_lock_file_path(&lock));
 		goto out;
+#endif
 	}
 
 	while (fgets(buf, sizeof(buf), config_file)) {
diff --git a/git-gui/Makefile b/git-gui/Makefile
index f10caedaa..de285aeb4 100644
--- a/git-gui/Makefile
+++ b/git-gui/Makefile
@@ -57,7 +57,7 @@ INSTALL_X1 =
 INSTALL_A0 = find # space is required here
 INSTALL_A1 = | cpio -pud
 INSTALL_L0 = rm -f # space is required here
-INSTALL_L1 = && ln # space is required here
+INSTALL_L1 = && ln -s # space is required here
 INSTALL_L2 =
 INSTALL_L3 =
 
@@ -87,7 +87,7 @@ ifndef V
 	INSTALL_L0 = dst=
 	INSTALL_L1 = && src=
 	INSTALL_L2 = && dst=
-	INSTALL_L3 = && echo '   ' 'LINK       ' `basename "$$dst"` '->' `basename "$$src"` && rm -f "$$dst" && ln "$$src" "$$dst"
+	INSTALL_L3 = && echo '   ' 'LINK       ' `basename "$$dst"` '->' `basename "$$src"` && rm -f "$$dst" && ln -s "$$src" "$$dst"
 
 	CLEAN_DST = echo ' ' UNINSTALL
 	REMOVE_D0 = dir=
